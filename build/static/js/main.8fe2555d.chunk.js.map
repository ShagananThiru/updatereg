{"version":3,"sources":["Register.js","App.js","serviceWorker.js","index.js"],"names":["Form","t","form","Gender","enums","1","2","Exten","65","94","91","17","User","struct","FirstName","String","LastName","GenderU","email","Address","PostCode","Country","Extention","MobilePhone","Occupation","Field","OrganizationName","terms","Boolean","Options","fields","password","error","label","attrs","className","placeholder","auto","Time","state","email_flag","serverUpdate_flag","userData","values","JSON","stringify","this","_form","getValue","console","log","setState","fetch","then","res","json","data","status","alt","src","style","color","marginTop","fontSize","type","ref","c","options","onClick","handleSubmit","Component","App","background","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8fe2555d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport t from 'tcomb-form'\r\n\r\nimport './Register.css'\r\n\r\n// https://github.com/gcanti/tcomb-form/blob/master/GUIDE.md#styling\r\nconst Form = t.form.Form;\r\n\r\n\r\nvar Gender = t.enums({\r\n    \r\n    1: 'Male',\r\n    2: 'Female'\r\n  });\r\n\r\n  var Exten = t.enums({   \r\n    65: '+65',\r\n    94: '+94',\r\n    91: '+91',\r\n    17: '+12'\r\n  });\r\n\r\n\r\nconst User = t.struct({\r\n  FirstName: t.String,\r\n  LastName: t.String, //t.maybe(t.String),\r\n  GenderU: Gender,\r\n  email: t.String,\r\n  Address: t.String,\r\n  PostCode: t.String,\r\n  Country: t.String,\r\n  Extention:Exten,\r\n  MobilePhone: t.String,\r\n  Occupation: t.String,\r\n  Field: t.String,\r\n  OrganizationName: t.String,\r\n \r\n  terms: t.Boolean\r\n  \r\n});\r\n\r\n\r\n\r\nconst Options = {\r\n  \r\n  fields: {\r\n    email: {\r\n      // error: 'Without an email address how are you going to reset your password when you forget it?'\r\n    },\r\n    password: {\r\n      error: 'Choose something you use on a dozen other sites or something you won\\'t remember'\r\n    },\r\n    terms: {\r\n      label: 'Email double checked',\r\n      attrs: {\r\n        className: 'formlabel'\r\n      }\r\n    },\r\n    FirstName:{\r\n      placeholder : 'First Name',\r\n    },\r\n    LastName:{\r\n      placeholder : 'Last Name',\r\n    },\r\n    GenderU:{\r\n        label: 'Gender ',\r\n        className:'formlabel',\r\n    },\r\n    Extention:{\r\n      label: 'Ext ',\r\n    }\r\n  },\r\n  \r\n    auto: 'placeholders',\r\n    \r\n  \r\n};\r\n\r\nclass Time extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            email_flag:null,\r\n            serverUpdate_flag: null,\r\n            userData:null,\r\n        }\r\n    }\r\n    \r\n\r\n    async handleSubmit(){\r\n        const values = JSON.stringify(this._form.getValue())\r\n       \r\n        if(values !== 'null'){\r\n          console.log(values)\r\n          this.setState({userData:10})\r\n          await fetch(`/data?agr1=${values}`)\r\n          .then(res => res.json())          // convert to plain text\r\n          .then(data => this.setState({email_flag:data.status})) \r\n\r\n\r\n          // .then(response => response.json())\r\n          // .then(data =>{this.setState({email_flag:data.status});\r\n          // });\r\n        }\r\n    \r\n        \r\n    }\r\n\r\n    handleServerupdate(){\r\n      \r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n              <div className='viewBtn' ><img alt='logo' src='asserts/logo.jpg' className='logoImg'/></div>\r\n              <div className='viewtxt'>Let's fight for</div>\r\n              <div className='viewtxt'>Virus free Earth, Together.. </div>\r\n              { this.state.userData\r\n                ? <>\r\n                    {this.state.email_flag\r\n                      ?<>\r\n                          {this.state.email_flag==='1'\r\n                            ?<>\r\n                              <div  className='viewtxt'  style={{color:'#49FB0A', marginTop:'10px'}}>Pls check your Email </div>\r\n                              <div  className='viewtxt'  style={{color:'#49FB0A', marginTop:'-10px'}}>for AiThena QR code</div>\r\n                             </>\r\n                            :<>\r\n                              <div  className='viewtxt'  style={{color:'#FB0A0A', marginTop:'10px', fontSize:'15px'}}>Your Email is invalid</div>\r\n                              <div  className='viewtxt'  style={{color:'#FBC60A', marginTop:'-10px'}}>Pls try again</div>\r\n                             </>\r\n\r\n                          }\r\n                      </>\r\n\r\n                    :<>\r\n                      <div  className='viewtxt'  style={{color:'#FBC60A', marginTop:'10px'}}>Please wait for a while</div>\r\n                      <div className='lo adView'><img alt='loading' className='loading' src='asserts/giphy.gif' /></div>\r\n                     </>\r\n                    } \r\n                  </>\r\n                :\r\n                  <>   \r\n                    <form className='formlab el'><Form  type={User} ref={c => this._form = c} options={Options} />  </form>\r\n                    <div className='viewBtn'>\r\n                      <div style={{fontSize:'11px'}}>We send the QR code to your email </div>\r\n                    <button  onClick={()=>this.handleSubmit()} className=\"sumitBtn\">Submit</button>\r\n                    </div>\r\n                    \r\n                  </>\r\n              }\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n    \r\n\r\nexport default Time;","import React from 'react';\nimport './App.css';\n\nimport Register from './Register'\n\nfunction App() {\n\n  return (\n    <div style={{background:'black'}}>\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Register/>\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}